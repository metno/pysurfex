[tool.poetry]
    name = "pysurfex"
    version = "0.0.3"
    description = "Python API to SURFEX"
    authors = ["Trygve Aspelien"]
    license = "MIT"
    readme = "README.rst"
    repository = "https://github.com/metno/pysurfex"
    documentation = "https://metno.github.io/pysurfex/"

[tool.poetry.scripts]
    bufr2json = "surfex.cli:bufr2json"
    create_forcing = "surfex.cli:create_forcing"
    create_lsm_file = "surfex.cli:create_lsm_file_assim"
    create_namelist = "surfex.cli:create_namelist"
    cryoclim_pseudoobs = "surfex.cli:cryoclim_pseudoobs"
    FirstGuess4gridpp = "surfex.cli:first_guess_for_oi"
    dump_environ = "surfex.cli:dump_environ"
    gridpp = "surfex.cli:gridpp"
    hm2pysurfex = "surfex.cli:hm2pysurfex"
    masterodb = "surfex.cli:masterodb"
    merge_qc_data = "surfex.cli:cli_merge_qc_data"
    modify_forcing = "surfex.cli:cli_modify_forcing"
    obs2json = "surfex.cli:obs2json"
    oi2soda = "surfex.cli:cli_oi2soda"
    offline = "surfex.cli:offline"
    perturbed_offline = "surfex.cli:perturbed_offline"
    pgd = "surfex.cli:pgd"
    plot_points = "surfex.cli:plot_points"
    prep = "surfex.cli:prep"
    qc2obsmon = "surfex.cli:qc2obsmon"
    sentinel_obs = "surfex.cli:sentinel_obs"
    set_domain = "surfex.cli:cli_set_domain"
    set_geo_from_obs_set = "surfex.cli:cli_set_geo_from_obs_set"
    set_geo_from_stationlist = "surfex.cli:set_geo_from_stationlist"
    shape2ign = "surfex.cli:cli_shape2ign"
    soda = "surfex.cli:soda"
    titan = "surfex.cli:titan"

[build-system]
    build-backend = "poetry.core.masonry.api"
    requires = ["poetry-core > 1.2.0"]

[tool.poetry.dependencies]
    python = "^3.8"
    dateutils = "^0.6.12"
    fastjsonschema = "2.16.2"
    f90nml = "^1.4.3"
    humanize = "^3.14.0"
    numexpr = "^2.8.4"
    numpy = "^1.22.4"
    pandas = "^1.4.0"
    pyproj = "^3.3.0"
    pyyaml = "^6.0"
    toml = "^0.10.2"

#[tool.poetry.group.formats.dependencies]
    netcdf4 = "^1.6.3"
    cfunits = "^3.3.5"
    eccodes = "^1.5.1"

#[tool.poetry.group.points.dependencies]
    requests = "^2.28.2"
    gridpp = "^0.6.0"
    titanlib = "^0.3.3"

#[tool.poetry.group.plot.dependencies]
    matplotlib = "^3.7.1"

[tool.poetry.group.dev.dependencies]
    jupyterlab = "^3.6.1"
    nb-clean = "^2.4.0"
    poetryup = "^0.12.7"
    pre-commit = "^3.0.4"

[tool.poetry.group.test.dependencies]
    pytest = "^7.2.2"
    pytest-cov = "^3.0.0"
    pytest-mock = "^3.7.0"
    pytest-profiling = "^1.7.0"
    pytest-timeout = "^2.1.0"
    pytest-xdist = "^3.2.0"
    coveralls = "^3.3.1"
    sphinx = "^6.2.1"

[tool.poetry.group.linting.dependencies]
    black = "^22.1.0"
    flake8 = "^4.0.1"
    flakeheaven = "^0.11.1"
    isort = "^5.10.1"
    pyment = "0.3.3"
    pylint = "^2.12.2"
    # flake8 plugins
    darglint = "^1.8.1"
    flake8-bandit = "^3.0.0"
    flake8-bugbear = "^22.1.11"
    flake8-builtins = "^1.5.3"
    flake8-comprehensions = "^3.8.0"
    flake8-docstrings = "^1.6.0"
    flake8-eradicate = "^1.2.0"
    flake8-logging-format = "^0.9.0"
    flake8-mutable = "^1.2.0"
    flake8-pytest-style = "^1.6.0"
    mccabe = "^0.6.1"
    pep8-naming = "^0.12.1"

[tool.pytest.ini_options]
    testpaths = ["tests/unit", "tests/smoke"]
    addopts = "-v --cov-report=term-missing --cov-report=term:skip-covered --cov-report=xml:.coverage.xml --cov=./"
    #addopts = "-v --cov-report=term-missing --cov-report=term:skip-covered -cov-report=html --cov=./"
    log_cli_level = "INFO"

[tool.black]
    line-length = 90

[tool.isort]
    profile = "black"
    line_length = 90

[tool.pylint.MASTER]
    # See <https://github.com/PyCQA/pylint/blob/master/pylint/extensions/docparams.py>
    load-plugins = "pylint.extensions.docparams"

[tool.pylint.BASIC]
    # We'll use pylint separate from flakheaven. Some pylint options don't seem to be
    # respected when using it via flakeheaven (e.g., fail-under).
    # For a description of the config opts used here, see:
    # <https://docs.pylint.org/en/1.6.0/options.html>
    # <https://docs.pylint.org/en/1.6.0/features.html>
    # <https://docs.pylint.org/en/1.6.0/faq.html>
    # Also, run "pylint --generate-rcfile" to see all applied pylint opts.
    fail-under = "8.0"
    good-names = ["i", "j", "n", "x", "y", "df", "db", "dt", "g0"]
    # Default value for the rgx below: "[a-z_][a-z0-9_]{2,30}$"
    attr-rgx = "[a-z_][a-z0-9_]{1,30}$"

[tool.pylint.messages_control]
    # Disable C0116 (Missing function or method docstring). Leave it to flake8-docstrings
    # Disable C0326 and C0330 to avoid clashing with black
    # Disable C0301 (Line too long). Leave it for black to control.
    # See <https://black.readthedocs.io/en/stable/compatible_configs.html#pylint>
    # Disable E0402 due to false positives <https://github.com/flycheck/flycheck/issues/1758>
    disable = "C0116, C0301, C0326, C0330, E0402"
    # Fix "no-name-in-module" error when linting pydantic-based code.
    # See <https://github.com/samuelcolvin/pydantic/issues/1961>
    extension-pkg-whitelist = "pydantic"

[tool.pylint.format]
    # Set max-line-length compatible with black
    max-line-length = "90"

[tool.flakeheaven]
    base = ".flakeheaven.toml"

[project]
  name = "pysurfex"
  version = "0.1.2"
  description = "Python API to SURFEX"
  authors = [{name = "Trygve Aspelien"}]
  license = "MIT"
  readme = "README.rst"
  repository = "https://github.com/metno/pysurfex"
  documentation = "https://metno.github.io/pysurfex/"
  dependencies = [
    "f90nml>=1.4.3",
    "pyproj>=3.3.0",
    "numpy>=1.20.1"
  ]

[tool.poetry.scripts]
  bufr2json = "pysurfex.cli:bufr2json"
  create_forcing = "pysurfex.cli:create_forcing"
  create_lsm_file = "pysurfex.cli:create_lsm_file_assim"
  create_namelist = "pysurfex.cli:create_namelist"
  cryoclim_pseudoobs = "pysurfex.cli:cryoclim_pseudoobs"
  concat_datasets = "pysurfex.verification:concat_datasets"
  concat_datasets_verif = "pysurfex.verification:concat_datasets_verif"
  converter2ds = "pysurfex.verification:converter2ds"
  converter2harp = "pysurfex.verification:converter2harp"
  ds2verif =  "pysurfex.verification:ds2verif"
  FirstGuess4gridpp = "pysurfex.cli:first_guess_for_oi"
  dump_environ = "pysurfex.cli:dump_environ"
  gridpp = "pysurfex.cli:gridpp"
  merge_qc_data = "pysurfex.cli:cli_merge_qc_data"
  modify_forcing = "pysurfex.cli:cli_modify_forcing"
  obs2json = "pysurfex.cli:obs2json"
  oi2soda = "pysurfex.cli:cli_oi2soda"
  offline = "pysurfex.cli:offline"
  perturbed_offline = "pysurfex.cli:perturbed_offline"
  pgd = "pysurfex.cli:pgd"
  plot_field = "pysurfex.cli:plot_field"
  plot_points = "pysurfex.cli:plot_points"
  prep = "pysurfex.cli:prep"
  qc2obsmon = "pysurfex.cli:qc2obsmon"
  sentinel_obs = "pysurfex.cli:sentinel_obs"
  set_domain_from_harmonie = "pysurfex.cli:cli_set_domain_from_harmonie"
  set_geo_from_obs_set = "pysurfex.cli:cli_set_geo_from_obs_set"
  set_geo_from_stationlist = "pysurfex.cli:set_geo_from_stationlist"
  shape2ign = "pysurfex.cli:cli_shape2ign"
  soda = "pysurfex.cli:soda"
  titan = "pysurfex.cli:titan"
  vfld2ds = "pysurfex.verification:vfld2ds"

[build-system]
  build-backend = "poetry.core.masonry.api"
  requires = ["poetry-core > 1.2.0"]

[tool.poetry.dependencies]
  python = "^3.10"

[project.optional-dependencies]
  points = [
    "pyyaml>=6.0",
    "eccodes>1.5.1",
    "findlibs>=0.0.5, <= 1.0.0; python_version <'3.10'",
    "requests>=2.32.3",
    "gridpp>=0.7.1",
    "titanlib>=0.3.4.dev3"
  ]
  netcdf = [
    "netcdf4>=1.5.7",
    "cfunits>=3.3.5",
  ]
  faformat = [
    "falfilfa4py>=1.0.0",
    "epygram>=2.0.0",
    "cartopy"
  ]
  plot = ["matplotlib>=3.7.1"]
  verification = [
    "verif>=1.2.3",
    "xarray>=2025.3.1",
    "pandas>=2.0.0"
  ]

  test = [
    "pytest>=7.2.2",
    "pytest-cov>=4.0.0",
    "pytest-mock>= 3.7.0",
    "pytest-profiling>= 1.7.0",
    "pytest-timeout>= 2.1.0",
    "pytest-xdist>= 3.2.0",
    "sphinx >=7.0.0"
  ]

  linting = [
    "black[jupyter]>=23.10.0",
    "isort>=5.12.0",
    "ruff>=0.11.0",
    "poethepoet[poetry-plugin]>=0.24.4",
    "pydoclint>00.3.8" # Replaces darglint, but is maintained & faster
  ]

[tool.pytest.ini_options]
  testpaths = ["tests/unit", "tests/smoke"]
  addopts = "-v --cov-report=term-missing --cov-report=term:skip-covered --cov-report=xml:.coverage.xml --cov=./"
  log_cli_level = "INFO"

[tool.black]
  line-length = 90

[tool.isort]
  profile = "black"
  line_length = 90

[tool.ruff]
  ignore = [
    "C901",
    "D105",
    "EXE001",
    "PLE1205",
    "PLR0912",
    "PLR0915",
    "PLR0913",
    "PLR2004",
    "RET504",
    "RUF012",
    "PERF401",
    "PD011"
  ]
  line-length = 90
  select = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C4",
    "C90",
    "D",
    "E",
    "ERA",
    "EXE",
    "F",
    "G",
    "I",
    "N",
    "PD",
    "PERF",
    "PIE",
    "PL",
    "PT",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLF",
    "T20",
    "W",
  ]

[tool.ruff.per-file-ignores]
  # S101: Use of `assert` detected
  "scheduler.py" = ["T201"]
  "tests/**/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "E501",
    "S101",
    "SLF001",
  ]

[tool.ruff.pydocstyle]
  convention = "google"

[tool.toml-formatter]
  indentation = 2
  section_order_overrides = [
    "^general$",
    "general.*",
    "^tool.poetry$",
    "^tool.poetry.scripts$",
    "build-system",
    "tool.poetry.*",
  ]

[tool.pylint.format]
  # Set max-line-length compatible with black
  max-line-length = "90"


####################################
# Leave configs for `poe` separate #
####################################

[tool.poe]
  poetry_command = "devtools"

[tool.poe.tasks]
  # Doc-related stuff
  _doc_build.shell = """
    cd docs
    poetry run python auto_sphinx.py
    make html
  """
  # Linting tasks
  _black = "black ."
  _isort = "isort ."
  _ruff = "ruff check ."
  _toml_formatter = "toml-formatter check ."
  # Test-related tasks
  pytest = "pytest"
  # Tasks to be run as pre-push checks
  pre-push-checks = ["lint", "doc clean", "doc build", "pytest"]

[tool.poe.tasks.doc]
  args = [
    {name = "doc_action", positional = true, help = "{all,clean,build,view}", default = "all"},
  ]
  control = {expr = "doc_action"}

[[tool.poe.tasks.doc.switch]]
  case = "all"
  sequence = ["doc build"] #, "doc view"]

[[tool.poe.tasks.doc.switch]]
  case = "clean"
  cmd = "rm -rf docs/_build/ docs/deode.rst docs/markdown_docs/config.md"

[[tool.poe.tasks.doc.switch]]
  case = "build"
  sequence = ["doc clean", "_doc_build"]

[[tool.poe.tasks.doc.switch]]
  case = "view"
  sequence = [
    {shell = "[ ! -f docs/_build/index.html ] && poetry devtools doc build || exit 0"},
    {script = "webbrowser:open('docs/_build/index.html')"},
  ]

[tool.poe.tasks.lint]
  args = [{name = "fix", type = "boolean", default = false}]
  control = {expr = "fix"}

[[tool.poe.tasks.lint.switch]]
  case = "True"
  sequence = ["_isort", "_black", "_ruff --fix"]

[[tool.poe.tasks.lint.switch]]
  case = "False"
  sequence = [
    "_isort --check-only",
    "_black --check --diff",
    "_ruff",
  ]
